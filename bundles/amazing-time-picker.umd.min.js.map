{"version":3,"file":"amazing-time-picker.umd.min.js","sources":["~/amazing-time-picker/src/app/atp-library/atp-core.service.ts","~/amazing-time-picker/src/app/atp-library/time-picker/time-picker.component.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/observable/BoundCallbackObservable.ts","../../../node_modules/src/observable/bindCallback.ts","../../../node_modules/src/add/observable/bindCallback.ts","../../../node_modules/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/src/observable/bindNodeCallback.ts","../../../node_modules/src/add/observable/bindNodeCallback.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/combineLatest.ts","../../../node_modules/src/add/observable/combineLatest.ts","../../../node_modules/src/observable/of.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/observable/from.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/util/identity.ts","../../../node_modules/src/operators/mergeAll.ts","../../../node_modules/src/operators/concatAll.ts","../../../node_modules/src/observable/concat.ts","../../../node_modules/src/add/observable/concat.ts","../../../node_modules/src/observable/DeferObservable.ts","../../../node_modules/src/observable/defer.ts","../../../node_modules/src/add/observable/defer.ts","../../../node_modules/src/observable/empty.ts","../../../node_modules/src/add/observable/empty.ts","../../../node_modules/src/observable/ForkJoinObservable.ts","../../../node_modules/src/observable/forkJoin.ts","../../../node_modules/src/add/observable/forkJoin.ts","../../../node_modules/src/add/observable/from.ts","../../../node_modules/src/observable/FromEventObservable.ts","../../../node_modules/src/observable/fromEvent.ts","../../../node_modules/src/add/observable/fromEvent.ts","../../../node_modules/src/observable/FromEventPatternObservable.ts","../../../node_modules/src/observable/fromEventPattern.ts","../../../node_modules/src/add/observable/fromEventPattern.ts","../../../node_modules/src/observable/fromPromise.ts","../../../node_modules/src/add/observable/fromPromise.ts","../../../node_modules/src/observable/GenerateObservable.ts","../../../node_modules/src/observable/generate.ts","../../../node_modules/src/add/observable/generate.ts","../../../node_modules/src/observable/IfObservable.ts","../../../node_modules/src/observable/if.ts","../../../node_modules/src/add/observable/if.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/observable/IntervalObservable.ts","../../../node_modules/src/observable/interval.ts","../../../node_modules/src/add/observable/interval.ts","../../../node_modules/src/observable/merge.ts","../../../node_modules/src/add/observable/merge.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/add/observable/race.ts","../../../node_modules/src/observable/NeverObservable.ts","../../../node_modules/src/observable/never.ts","../../../node_modules/src/add/observable/never.ts","../../../node_modules/src/add/observable/of.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/observable/onErrorResumeNext.ts","../../../node_modules/src/add/observable/onErrorResumeNext.ts","../../../node_modules/src/observable/PairsObservable.ts","../../../node_modules/src/observable/pairs.ts","../../../node_modules/src/add/observable/pairs.ts","../../../node_modules/src/observable/RangeObservable.ts","../../../node_modules/src/observable/range.ts","../../../node_modules/src/add/observable/range.ts","../../../node_modules/src/observable/UsingObservable.ts","../../../node_modules/src/observable/using.ts","../../../node_modules/src/add/observable/using.ts","../../../node_modules/src/observable/ErrorObservable.ts","../../../node_modules/src/observable/throw.ts","../../../node_modules/src/add/observable/throw.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/observable/timer.ts","../../../node_modules/src/add/observable/timer.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/observable/zip.ts","../../../node_modules/src/add/observable/zip.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/observable/dom/AjaxObservable.ts","../../../node_modules/src/observable/dom/ajax.ts","../../../node_modules/src/add/observable/dom/ajax.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/util/assign.ts","../../../node_modules/src/observable/dom/WebSocketSubject.ts","../../../node_modules/src/observable/dom/webSocket.ts","../../../node_modules/src/add/observable/dom/webSocket.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operator/buffer.ts","../../../node_modules/src/add/operator/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operator/bufferCount.ts","../../../node_modules/src/add/operator/bufferCount.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/operator/bufferTime.ts","../../../node_modules/src/add/operator/bufferTime.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operator/bufferToggle.ts","../../../node_modules/src/add/operator/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operator/bufferWhen.ts","../../../node_modules/src/add/operator/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/operator/catch.ts","../../../node_modules/src/add/operator/catch.ts","../../../node_modules/src/operators/combineAll.ts","../../../node_modules/src/operator/combineAll.ts","../../../node_modules/src/add/operator/combineAll.ts","../../../node_modules/src/operator/combineLatest.ts","../../../node_modules/src/add/operator/combineLatest.ts","../../../node_modules/src/operators/concat.ts","../../../node_modules/src/operator/concat.ts","../../../node_modules/src/add/operator/concat.ts","../../../node_modules/src/operator/concatAll.ts","../../../node_modules/src/add/operator/concatAll.ts","../../../node_modules/src/operators/concatMap.ts","../../../node_modules/src/operator/concatMap.ts","../../../node_modules/src/add/operator/concatMap.ts","../../../node_modules/src/operators/concatMapTo.ts","../../../node_modules/src/operator/concatMapTo.ts","../../../node_modules/src/add/operator/concatMapTo.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operator/count.ts","../../../node_modules/src/add/operator/count.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operator/dematerialize.ts","../../../node_modules/src/add/operator/dematerialize.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operator/debounce.ts","../../../node_modules/src/add/operator/debounce.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/operator/debounceTime.ts","../../../node_modules/src/add/operator/debounceTime.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operator/defaultIfEmpty.ts","../../../node_modules/src/add/operator/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operator/delay.ts","../../../node_modules/src/add/operator/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operator/delayWhen.ts","../../../node_modules/src/add/operator/delayWhen.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operator/distinct.ts","../../../node_modules/src/add/operator/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/operator/distinctUntilChanged.ts","../../../node_modules/src/add/operator/distinctUntilChanged.ts","../../../node_modules/src/operators/distinctUntilKeyChanged.ts","../../../node_modules/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operator/do.ts","../../../node_modules/src/add/operator/do.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operator/exhaust.ts","../../../node_modules/src/add/operator/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operator/exhaustMap.ts","../../../node_modules/src/add/operator/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operator/expand.ts","../../../node_modules/src/add/operator/expand.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operator/elementAt.ts","../../../node_modules/src/add/operator/elementAt.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operator/filter.ts","../../../node_modules/src/add/operator/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operator/finally.ts","../../../node_modules/src/add/operator/finally.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/operator/find.ts","../../../node_modules/src/add/operator/find.ts","../../../node_modules/src/operators/findIndex.ts","../../../node_modules/src/operator/findIndex.ts","../../../node_modules/src/add/operator/findIndex.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/operator/first.ts","../../../node_modules/src/add/operator/first.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operator/groupBy.ts","../../../node_modules/src/add/operator/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operator/ignoreElements.ts","../../../node_modules/src/add/operator/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operator/isEmpty.ts","../../../node_modules/src/add/operator/isEmpty.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/operator/audit.ts","../../../node_modules/src/add/operator/audit.ts","../../../node_modules/src/operators/auditTime.ts","../../../node_modules/src/operator/auditTime.ts","../../../node_modules/src/add/operator/auditTime.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operator/last.ts","../../../node_modules/src/add/operator/last.ts","../../../node_modules/src/operator/let.ts","../../../node_modules/src/add/operator/let.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operator/every.ts","../../../node_modules/src/add/operator/every.ts","../../../node_modules/src/operator/map.ts","../../../node_modules/src/add/operator/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operator/mapTo.ts","../../../node_modules/src/add/operator/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operator/materialize.ts","../../../node_modules/src/add/operator/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/reduce.ts","../../../node_modules/src/operators/max.ts","../../../node_modules/src/operator/max.ts","../../../node_modules/src/add/operator/max.ts","../../../node_modules/src/operators/merge.ts","../../../node_modules/src/operator/merge.ts","../../../node_modules/src/add/operator/merge.ts","../../../node_modules/src/operator/mergeAll.ts","../../../node_modules/src/add/operator/mergeAll.ts","../../../node_modules/src/operator/mergeMap.ts","../../../node_modules/src/add/operator/mergeMap.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operator/mergeMapTo.ts","../../../node_modules/src/add/operator/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operator/mergeScan.ts","../../../node_modules/src/add/operator/mergeScan.ts","../../../node_modules/src/operators/min.ts","../../../node_modules/src/operator/min.ts","../../../node_modules/src/add/operator/min.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operator/multicast.ts","../../../node_modules/src/add/operator/multicast.ts","../../../node_modules/src/operator/observeOn.ts","../../../node_modules/src/add/operator/observeOn.ts","../../../node_modules/src/operator/onErrorResumeNext.ts","../../../node_modules/src/add/operator/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/operator/pairwise.ts","../../../node_modules/src/add/operator/pairwise.ts","../../../node_modules/src/util/not.ts","../../../node_modules/src/operators/partition.ts","../../../node_modules/src/operator/partition.ts","../../../node_modules/src/add/operator/partition.ts","../../../node_modules/src/operators/pluck.ts","../../../node_modules/src/operator/pluck.ts","../../../node_modules/src/add/operator/pluck.ts","../../../node_modules/src/operators/publish.ts","../../../node_modules/src/operator/publish.ts","../../../node_modules/src/add/operator/publish.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/operators/publishBehavior.ts","../../../node_modules/src/operator/publishBehavior.ts","../../../node_modules/src/add/operator/publishBehavior.ts","../../../node_modules/src/operators/publishReplay.ts","../../../node_modules/src/operator/publishReplay.ts","../../../node_modules/src/add/operator/publishReplay.ts","../../../node_modules/src/operators/publishLast.ts","../../../node_modules/src/operator/publishLast.ts","../../../node_modules/src/add/operator/publishLast.ts","../../../node_modules/src/operators/race.ts","../../../node_modules/src/operator/race.ts","../../../node_modules/src/add/operator/race.ts","../../../node_modules/src/operator/reduce.ts","../../../node_modules/src/add/operator/reduce.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operator/repeat.ts","../../../node_modules/src/add/operator/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operator/repeatWhen.ts","../../../node_modules/src/add/operator/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operator/retry.ts","../../../node_modules/src/add/operator/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operator/retryWhen.ts","../../../node_modules/src/add/operator/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operator/sample.ts","../../../node_modules/src/add/operator/sample.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operator/sampleTime.ts","../../../node_modules/src/add/operator/sampleTime.ts","../../../node_modules/src/operator/scan.ts","../../../node_modules/src/add/operator/scan.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operator/sequenceEqual.ts","../../../node_modules/src/add/operator/sequenceEqual.ts","../../../node_modules/src/operators/share.ts","../../../node_modules/src/operator/share.ts","../../../node_modules/src/add/operator/share.ts","../../../node_modules/src/operators/shareReplay.ts","../../../node_modules/src/operator/shareReplay.ts","../../../node_modules/src/add/operator/shareReplay.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operator/single.ts","../../../node_modules/src/add/operator/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operator/skip.ts","../../../node_modules/src/add/operator/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operator/skipLast.ts","../../../node_modules/src/add/operator/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operator/skipUntil.ts","../../../node_modules/src/add/operator/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operator/skipWhile.ts","../../../node_modules/src/add/operator/skipWhile.ts","../../../node_modules/src/operators/startWith.ts","../../../node_modules/src/operator/startWith.ts","../../../node_modules/src/add/operator/startWith.ts","../../../node_modules/src/util/Immediate.ts","../../../node_modules/src/scheduler/AsapAction.ts","../../../node_modules/src/scheduler/asap.ts","../../../node_modules/src/scheduler/AsapScheduler.ts","../../../node_modules/src/observable/SubscribeOnObservable.ts","../../../node_modules/src/operators/subscribeOn.ts","../../../node_modules/src/operator/subscribeOn.ts","../../../node_modules/src/add/operator/subscribeOn.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchAll.ts","../../../node_modules/src/operator/switch.ts","../../../node_modules/src/add/operator/switch.ts","../../../node_modules/src/operator/switchMap.ts","../../../node_modules/src/add/operator/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operator/switchMapTo.ts","../../../node_modules/src/add/operator/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operator/take.ts","../../../node_modules/src/add/operator/take.ts","../../../node_modules/src/operator/takeLast.ts","../../../node_modules/src/add/operator/takeLast.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operator/takeUntil.ts","../../../node_modules/src/add/operator/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operator/takeWhile.ts","../../../node_modules/src/add/operator/takeWhile.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operator/throttle.ts","../../../node_modules/src/add/operator/throttle.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operator/throttleTime.ts","../../../node_modules/src/add/operator/throttleTime.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/operator/timeInterval.ts","../../../node_modules/src/add/operator/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operator/timeout.ts","../../../node_modules/src/add/operator/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operator/timeoutWith.ts","../../../node_modules/src/add/operator/timeoutWith.ts","../../../node_modules/src/operators/timestamp.ts","../../../node_modules/src/operator/timestamp.ts","../../../node_modules/src/add/operator/timestamp.ts","../../../node_modules/src/operators/toArray.ts","../../../node_modules/src/operator/toArray.ts","../../../node_modules/src/add/operator/toArray.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operator/window.ts","../../../node_modules/src/add/operator/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operator/windowCount.ts","../../../node_modules/src/add/operator/windowCount.ts","../../../node_modules/src/operators/windowTime.ts","../../../node_modules/src/operator/windowTime.ts","../../../node_modules/src/add/operator/windowTime.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operator/windowToggle.ts","../../../node_modules/src/add/operator/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operator/windowWhen.ts","../../../node_modules/src/add/operator/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operator/withLatestFrom.ts","../../../node_modules/src/add/operator/withLatestFrom.ts","../../../node_modules/src/operator/zip.ts","../../../node_modules/src/add/operator/zip.ts","../../../node_modules/src/operators/zipAll.ts","../../../node_modules/src/operator/zipAll.ts","../../../node_modules/src/add/operator/zipAll.ts","../../../node_modules/src/testing/SubscriptionLog.ts","../../../node_modules/src/testing/SubscriptionLoggable.ts","../../../node_modules/src/util/applyMixins.ts","../../../node_modules/src/testing/ColdObservable.ts","../../../node_modules/src/testing/HotObservable.ts","../../../node_modules/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/src/testing/TestScheduler.ts","../../../node_modules/src/util/AnimationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameAction.ts","../../../node_modules/src/Rx.ts","../../../node_modules/src/scheduler/animationFrame.ts","../../../node_modules/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/src/operators.ts","~/amazing-time-picker/src/app/atp-library/atp-time-picker/atp-time-picker.component.ts","~/amazing-time-picker/src/app/atp-library/preferences.ts","~/amazing-time-picker/src/app/atp-library/atp-time-picker.service.ts","~/amazing-time-picker/src/app/atp-library/atp.directive.ts","~/amazing-time-picker/src/app/atp-library/atp-time-picker.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {System, ITime} from './definitions';\nexport class AtpCoreService {\nconstructor() {\n    }\n/**\n * @param {?} min\n * @param {?} max\n * @param {?} system\n * @return {?}\n */\npublic allowedTimes(min, max, system: System) {\n        const /** @type {?} */ allTimes = [];\n        const /** @type {?} */ nowMinHour = +min.split(':')[0];\n        const /** @type {?} */ nowMaxHour = +max.split(':')[0];\n        const /** @type {?} */ nowMinMin = +min.split(':')[1];\n        const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n        console.log(nowMinHour, nowMaxHour);\n        for (let /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n            let /** @type {?} */ j = 0, /** @type {?} */\n                jDest = 59;\n            if (i === nowMinHour) {\n                j = nowMinMin;\n            } else if (i === nowMaxHour) {\n                jDest = nowMaxMin;\n            }\n            for (j; j <= jDest; j++) {\n                const /** @type {?} */ hour = (i <= 12 || system !== 'SYSTEM12' ? i : i - 12);\n                const /** @type {?} */ minute = j;\n                let /** @type {?} */ ampm = '';\n\n                if (system === 'SYSTEM12') {\n                    ampm = i < 12 ? 'AM' : 'PM';\n                }\n\n                allTimes.push(hour + ':' + minute + ampm);\n            }\n        }\n        console.log(allTimes);\n        return allTimes;\n    }\n/**\n * @param {?} rayon\n * @param {?} type\n * @param {?} format\n * @return {?}\n */\npublic ClockMaker(rayon: number, type: 'minute' | 'hour', format: System): Array<any> {\n        const /** @type {?} */ r = rayon;\n        const /** @type {?} */ step = type === 'hour' ? 1 : 5;\n        let /** @type {?} */ j = r - 25;\n        let /** @type {?} */ items = [];\n\n        if (type === 'hour' && format === 'SYSTEM24') {\n            items = items.concat(this.drawCircle(r, j, 1, 13, step, type));\n            j *= 0.65;\n            items = items.concat(this.drawCircle(r, j, 13, 25, step, type));\n        } else {\n            items = items.concat(this.drawCircle(r, j, (type === 'hour' ? 1 : 0), (type === 'hour' ? 12 : 60), step, type));\n        }\n        return items;\n    }\n/**\n * @param {?} rayon\n * @param {?} j\n * @param {?} start\n * @param {?} length\n * @param {?} step\n * @param {?} type\n * @return {?}\n */\npublic drawCircle(rayon: number, j: number, start: number, length: number, step: number, type: string) {\n        const /** @type {?} */ items = [];\n        for (let /** @type {?} */ min = start; min < length; min += step) {\n                const /** @type {?} */ str = String(min === 24 ? '0' : min);\n                const /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / (length - start)));\n                const /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / (length - start)));\n                items.push({\n                    time: str,\n                    left: (x + rayon - 17) + 'px',\n                    top: (-y + rayon - 17) + 'px',\n                    type\n                });\n        }\n        return items;\n    }\n/**\n * @param {?} time\n * @param {?} system\n * @return {?}\n */\npublic TimeToString(time: ITime, system: System): string {\n        const {ampm, minute, hour} = time;\n        let /** @type {?} */ hh;\n        if (system === 'SYSTEM12') {\n            hh = ampm === 'PM' ? +hour + 12 : +hour;\n            if (ampm === 'AM' && hh === 12) {\n                hh = 0;\n            }\n            if (hh === 24) {\n                hh = 12;\n            }\n        } else {\n            hh = hour;\n        }\n        hh = hh < 10 ? '0' + hh : /** @type {?} */(( '' + hh as any));\n        const /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n        return `${hh}:${mm}`;\n    }\n/**\n * Converts 00:00 system to ITime object\n * @param {?} time\n * @param {?} system\n * @return {?}\n */\npublic StringToTime(time: string, system: System): any {\n        const [h, m] = time.split(':');\n        const /** @type {?} */ hour = +h > 12 && system === 'SYSTEM12' ? +h - 12 : +h;\n        const /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n        return {\n            ampm, minute: +m, hour\n        };\n    }\n/**\n * \\@experimental\n * @param {?} ele\n * @param {?} parrentPos\n * @param {?} step\n * @return {?}\n */\npublic CalcDegrees(ele: any, parrentPos: any, step: number): {degrees: number, hitDistance: number} {\n        const /** @type {?} */ clock = {\n            width: ele.currentTarget.offsetWidth,\n            height: ele.currentTarget.offsetHeight\n        };\n        const /** @type {?} */ targetX = clock.width / 2;\n        const /** @type {?} */ targetY = clock.height / 2;\n        const /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n        const /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n        let /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n        radians += 2.5 * Math.PI;\n\n        let /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n        const /** @type {?} */ hitDistance = Math.sqrt(Math.pow(((ele.clientX - parrentPos.left) - targetX), 2) + Math.pow(((ele.clientY - parrentPos.top) - targetY), 2));\n        const /** @type {?} */ degMod = degrees % step;\n        if (degMod === 0) {\n            return {degrees: degrees, hitDistance: hitDistance};\n        } else if (degMod >= step / 2) {\n            degrees = degrees + (step - degMod);\n        } else if (degMod < step / 2) {\n            degrees = degrees - degMod;\n        }\n\n        return {degrees: degrees, hitDistance: hitDistance};\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AtpCoreService_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpCoreService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpCoreService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, OnInit} from '@angular/core';\nimport {IClockNumber, IDisplayPreference, ITime, TimePickerConfig} from '../definitions';\nimport {AtpCoreService} from '../atp-core.service';\nexport class TimePickerComponent implements OnInit {\n    _ref: any;\npublic subject: any = null;\npublic activeModal = false;\npublic timerElement: any;\npublic clockObject: Array<any>;\npublic isClicked: boolean;\npublic clockType: 'minute' | 'hour' = 'hour';\npublic time: ITime = {\n        ampm: 'AM',\n        minute: 0,\n        hour: 12\n    };\npublic nowTime: any = this.time.hour;\npublic degree: any;\npublic config: TimePickerConfig;\npublic appRef: any;\npublic isPopup = true;\npublic allowed: any;\npublic preference: IDisplayPreference;\npublic changeToMin: boolean;\npublic smallArrow = false;\nprivate rayon = 124;\nprivate animationTime = 0;\n/**\n * @param {?} core\n */\nconstructor(\nprivate core: AtpCoreService\n    ) {\n    }\n/**\n * @param {?} time\n * @return {?}\n */\npublic ParseStringToTime(time: string): void {\n        time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n        this.time = this.core.StringToTime(time, this.config.system);\n    }\n/**\n * @return {?}\n */\npublic GetTime() {\n        const /** @type {?} */ time = this.core.TimeToString(this.time, this.config.system);\n        this.subject.next(time);\n    }\n\n    clockMaker = () => {\n        const /** @type {?} */ type = this.clockType;\n        this.clockObject = this.core.ClockMaker(this.rayon, type, this.config.system);\n        this.setArrow(null);\n    };\n\n    setActiveTime = () => {\n        this.nowTime = (this.clockType === 'minute' ? this.time.minute : this.time.hour);\n    };\n\n    setArrow = (obj: any) => {\n        if (obj) {\n            this.clockType = obj.type;\n            if (this.clockType === 'minute') {\n                this.time.minute = obj.time;\n            } else {\n                this.time.hour = obj.time;\n            }\n        }\n        const /** @type {?} */ step = (this.clockType === 'minute') ? 6 : 30;\n        const /** @type {?} */ time = (this.clockType === 'minute') ? this.time.minute : this.time.hour;\n        const /** @type {?} */ degrees = time * step;\n        this.smallArrow = (this.clockType === 'hour' && (time > 12 || time === 0));\n        this.rotationClass(degrees);\n        this.setActiveTime();\n    };\n\n    rotationClass = (degrees: any) => {\n        this.degree = degrees;\n    };\n/**\n * @return {?}\n */\nsetTime() {\n        this.isClicked = false;\n        if (this.config.changeToMinutes && !this.config.onlyHour && this.clockType === 'hour') {\n            this.ChangeAnimational('minute');\n        }\n    }\n\n    getDegree = (ele: any) => {\n        const /** @type {?} */ step = this.clockType === 'minute' ? 6 : 30;\n        const /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n        if (this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n            this.smallArrow = false;\n            const /** @type {?} */ clock = {\n                width: ele.currentTarget.offsetWidth,\n                height: ele.currentTarget.offsetHeight\n            };\n            const /** @type {?} */ clickHit = this.core.CalcDegrees(ele, parrentPos, step);\n            let /** @type {?} */ hour = this.time.hour, /** @type {?} */\n                minute = this.time.minute;\n            if (this.clockType === 'hour') {\n                hour = (clickHit.degrees / step);\n                if (hour > 12) {\n                    hour = hour - 12;\n                }\n                if (this.config.system === 'SYSTEM24' && clickHit.hitDistance < (this.rayon * 0.60)) {\n                    hour += 12;\n                    if (hour === 24) {\n                        hour = 0;\n                    }\n                    this.smallArrow = true;\n                }\n            } else if (this.clockType === 'minute') {\n                minute = (clickHit.degrees / step);\n                minute = (minute > 59) ? minute - 60 : minute;\n            }\n\n            const /** @type {?} */ min = this.config.rangeTime.start, /** @type {?} */\n                max = this.config.rangeTime.end;\n\n            const /** @type {?} */ nowMinHour = (+min.split(':')[0] < 12 && this.config.system === 'SYSTEM12') ? +min.split(':')[0] : +min.split(':')[0] - 12;\n            const /** @type {?} */ nowMaxHour = (+max.split(':')[0] < 12 && this.config.system === 'SYSTEM12') ? +max.split(':')[0] : +max.split(':')[0] - 12;\n            const /** @type {?} */ nowMinMin = +min.split(':')[1];\n            const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n\n            const /** @type {?} */ nowTime = this.GetNowTime(hour, this.time.ampm, minute);\n            console.log(nowTime);\n            if (this.allowed.indexOf(nowTime) > -1) {\n                this.time.hour = hour;\n                this.time.minute = minute;\n                this.rotationClass(clickHit.degrees);\n                this.setActiveTime();\n            } else if (this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n                this.time.hour = nowMinHour;\n                this.time.minute = nowMinMin;\n            } else if (this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n                this.time.hour = nowMaxHour;\n                this.time.minute = nowMaxMin;\n            }\n        }\n    };\n/**\n * @return {?}\n */\ncheckBet() {\n        const /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n        if (this.allowed.indexOf(nowTime) === -1) {\n            this.ParseStringToTime(this.config.rangeTime.start);\n            this.setArrow(null);\n            this.setActiveTime();\n        }\n    }\n/**\n * Check if clock button time is not in allowed times and disabled\n * @param {?} t Button Time Value\n * @return {?}\n */\ncheckDisabled(t) {\n        const /** @type {?} */ m = (this.clockType === 'minute') ? t : this.time.minute;\n        const /** @type {?} */ h = (this.clockType === 'hour') ? t : this.time.hour;\n        const /** @type {?} */ nowTime = this.GetNowTime(h, this.time.ampm, m);\n        return (this.allowed.indexOf(nowTime) === -1) ? true : false;\n    }\n/**\n * @return {?}\n */\nmodalAnimation() {\n        setTimeout(() => {\n            this.activeModal = true;\n        }, 1);\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.allowed = this.core.allowedTimes(this.config.rangeTime.start, this.config.rangeTime.end, this.config.system);\n        if (this.config && this.config.onlyMinute) {\n            this.clockType = 'minute';\n        }\n        if (this.config) {\n            if (this.config.onlyPM) {\n                this.time.ampm = 'PM';\n            } else if (this.config.onlyAM) {\n                this.time.ampm = 'AM';\n            }\n        }\n        this.clockMaker();\n        this.modalAnimation();\n    }\n/**\n * @return {?}\n */\npublic MinuteClick() {\n        /**\n         * We are not permitting user to select the minute.\n         * but anyway, it will return the standard time, if provided the default time.\n         */\n        if (this.config && this.config.onlyHour) {\n            return false;\n        }\n\n        this.ChangeAnimational('minute');\n    }\n/**\n * @return {?}\n */\npublic HourClick() {\n        /**\n         * We are not permitting user to select the minute.\n         * but anyway, it will return the standard time, if provided the default time.\n         */\n        if (this.config && this.config.onlyMinute) {\n            return false;\n        }\n        this.ChangeAnimational('hour');\n    }\n/**\n * @param {?} type\n * @return {?}\n */\nChangeAnimational(type: 'minute' | 'hour') {\n        if (this.clockType !== type) {\n            if (this.config.animation === 'fade') {\n                this.changeToMin = true;\n                setTimeout(() => {\n                    this.changeToMin = false;\n                    this.clockType = type;\n                    this.clockMaker();\n                }, 200);\n            } else if (this.config.animation === 'rotate') {\n                this.animationTime = 0.4;\n                this.clockType = type;\n                this.clockMaker();\n            } else {\n                this.clockType = type;\n                this.clockMaker();\n            }\n        }\n    }\n/**\n * @return {?}\n */\nSetAM() {\n        if (this.config && this.config.onlyPM) {\n            return false;\n        }\n        this.time.ampm = 'AM';\n        this.checkBet();\n    }\n/**\n * @return {?}\n */\nSetPM() {\n        if (this.config && this.config.onlyAM) {\n            return false;\n        }\n        this.time.ampm = 'PM';\n        this.checkBet();\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nClose(e: any) {\n        if (e.target === e.currentTarget) {\n            if (this.isPopup === true) {\n                this.activeModal = false;\n                setTimeout(() => {\n                    this.appRef.detachView(this._ref.hostView);\n                    this._ref.destroy();\n                }, 400);\n            }\n        }\n    }\n/**\n * @return {?}\n */\ngetClockArrowStyle() {\n        let /** @type {?} */ arrowStyle = {};\n        if (this.config.animation === 'rotate') {\n            arrowStyle = {\n                transform: 'rotate(' + this.degree + 'deg)',\n                '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n                background: this.config.arrowStyle.background,\n                '-webkit-transition': 'transform ' + this.getAnimationTime(),\n                transition: 'transform ' + +this.getAnimationTime()\n            };\n        } else {\n            arrowStyle = {\n                transform: 'rotate(' + this.degree + 'deg)',\n                '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n                background: this.config.arrowStyle.background,\n            };\n        }\n        return arrowStyle;\n    }\n/**\n * @return {?}\n */\ngetAnimationTime() {\n        return this.animationTime + 's';\n    }\n/**\n * Event on clock mouse click down\n * @param {?} event - captured event\n * @return {?}\n */\nupdateClockDown(event) {\n        this.isClicked = true;\n        this.animationTime = 0;\n        this.getDegree(event);\n    }\n/**\n * @return {?}\n */\npublic GetSeparator() {\n        if (this.preference && this.preference.separator) {\n            return this.preference.separator;\n        }\n        return ':';\n    }\n/**\n * @param {?} period\n * @return {?}\n */\npublic GetPeriod(period: 'AM' | 'PM') {\n        if (this.preference && this.preference.period) {\n            return this.preference.period(period);\n        }\n        return period;\n    }\n/**\n * @return {?}\n */\npublic GetMinute() {\n        if (this.preference && this.preference.minute) {\n            return this.preference.minute(this.time.minute);\n        }\n        let /** @type {?} */ min: string = this.time.minute.toString();\n        if (+min < 10) {\n            min = '0' + min;\n        }\n        return min;\n    }\n/**\n * @return {?}\n */\npublic GetHour() {\n        if (this.preference && this.preference.hour) {\n            return this.preference.hour(this.time.hour);\n        }\n        return this.time.hour;\n    }\n/**\n * @param {?} clock\n * @return {?}\n */\npublic GetClockTime(clock: IClockNumber) {\n        if (!this.preference) {\n            return clock.time;\n        }\n        if (this.clockType === 'hour' && this.preference.clockHour) {\n            return this.preference.clockHour(clock.time);\n        }\n        if (this.clockType === 'minute' && this.preference.clockMinute) {\n            return this.preference.clockMinute(clock.time);\n        }\n        return clock.time;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic GetLabel(key: string) {\n        const /** @type {?} */ defaults = {\n            'ok': 'Ok',\n            'cancel': 'Cancel'\n        };\n        if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n            defaults.ok = this.preference.labels.ok;\n        }\n        if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n            defaults.cancel = this.preference.labels.cancel;\n        }\n        return defaults[key];\n    }\n/**\n * @param {?} hour\n * @param {?} ampm\n * @param {?} minute\n * @return {?}\n */\nprivate GetNowTime(hour: number, ampm: 'AM' | 'PM', minute: number): string {\n        const /** @type {?} */ Hour = (hour === 12 && ampm === 'AM' && this.config.system === 'SYSTEM12') ? '0' : hour;\n        const /** @type {?} */ system = (this.config.system === 'SYSTEM12' ? ' ' + ampm : '');\n        const /** @type {?} */ nowTime = Hour + ':' + minute + system;\n        return nowTime;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'time-picker',\n    template: `\n      <div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n        <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n          <div class=\"time-picker-header\">\n            <div class=\"time-picker-selected-time\">\n                <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n                  [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n                <span class=\"time-seprator\">{{GetSeparator()}}</span>\n                <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n                  [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n            </div>\n            <div *ngIf=\"config.system === 'SYSTEM12'\" class=\"time-picker-selected-ampm\">\n              <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n              <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n            </div>\n          </div>\n          <div class=\"time-picker-content\">\n              <div class=\"time-picker-clock\" [ngClass]=\"{'hide-time-picker-clock': changeToMin}\"  (mousemove)=\"getDegree($event);\" (mousedown)=\"updateClockDown($event)\" (mouseup)=\"setTime();\">\n                <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n                  [id]=\"'timepicker-item-id-' + clock.time\" \n                  [disabled]=\"checkDisabled(clock.time)\" \n                  [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n                  {{GetClockTime(clock)}}\n                </button>\n                <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n                <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngClass]=\"{'smallArrow': smallArrow}\" [ngStyle]=\"getClockArrowStyle()\">\n                  <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n                </div>\n              </div>\n          </div>\n          <div class=\"time-picker-footer\">\n              <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n              <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n          </div>\n        </div>\n      </div>\n    `,\n    styles: [`\n      #time-picker-wrapper {\n        position: fixed;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background: transparent;\n        -webkit-transition: background 0.4s;\n        transition: background 0.4s;\n        font-family: 'Roboto', sans-serif;\n        z-index: 1000; }\n        #time-picker-wrapper.static {\n          position: relative !important;\n          background: transparent !important;\n          display: inline-block;\n          z-index: 0; }\n        #time-picker-wrapper.active {\n          background: rgba(0, 0, 0, 0.3); }\n        #time-picker-wrapper.dark #time-picker {\n          background: #424242; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header {\n            border-bottom: none;\n            background: #555555; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time {\n              color: #999; }\n              #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: #999; }\n              #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-clock {\n            background: #555555; }\n            #time-picker-wrapper.dark #time-picker .time-picker-clock > button {\n              color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-footer {\n            border-top: none; }\n            #time-picker-wrapper.dark #time-picker .time-picker-footer button {\n              background: #555555;\n              color: #fff; }\n              #time-picker-wrapper.dark #time-picker .time-picker-footer button:hover {\n                background: #777; }\n        #time-picker-wrapper.light #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.light #time-picker .time-picker-header {\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time {\n              color: #aaa; }\n              #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #000; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: #aaa; }\n              #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #000; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.light #time-picker .time-picker-clock > button.active {\n                background: blue;\n                color: #fff; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: blue; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: blue; }\n              #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: blue; }\n          #time-picker-wrapper.light #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.light #time-picker .time-picker-footer button {\n              background: #f1f1f1; }\n              #time-picker-wrapper.light #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper.material-green #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header {\n            background-color: #00897b;\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.material-green #time-picker .time-picker-clock > button.active {\n                background: #00897b;\n                color: #fff; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: #00897b; }\n              #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: #00897b; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-footer button {\n              font-weight: bold;\n              text-transform: uppercase;\n              background: transparent;\n              color: #00897b; }\n              #time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper.material-blue #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header {\n            background-color: #3F51B5;\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button.active {\n                background: #3F51B5;\n                color: #fff; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: #3F51B5; }\n              #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: #3F51B5; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-footer button {\n              font-weight: bold;\n              text-transform: uppercase;\n              background: transparent;\n              color: #3F51B5; }\n              #time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper.material-red #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header {\n            background-color: #F44336;\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.material-red #time-picker .time-picker-clock > button.active {\n                background: #F44336;\n                color: #fff; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: #F44336; }\n              #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: #F44336; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-footer button {\n              font-weight: bold;\n              text-transform: uppercase;\n              background: transparent;\n              color: #F44336; }\n              #time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper.material-purple #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header {\n            background-color: #9C27B0;\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button.active {\n                background: #9C27B0;\n                color: #fff; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: #9C27B0; }\n              #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: #9C27B0; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-footer button {\n              font-weight: bold;\n              text-transform: uppercase;\n              background: transparent;\n              color: #9C27B0; }\n              #time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper.material-orange #time-picker {\n          background: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header {\n            background-color: #FF9800;\n            border-bottom: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected {\n                color: #fff; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm {\n              color: rgba(255, 255, 255, 0.4); }\n              #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n                color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock {\n            background: #ededed; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button {\n              color: #000; }\n              #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button.active {\n                background: #FF9800;\n                color: #fff; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin {\n              background: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow {\n              background: #FF9800; }\n              #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span {\n                background: #FF9800; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-footer {\n            border-top: 1px solid #e1e1e1; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-footer button {\n              font-weight: bold;\n              text-transform: uppercase;\n              background: transparent;\n              color: #FF9800; }\n              #time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover {\n                background: #ddd; }\n        #time-picker-wrapper #time-picker {\n          width: 325px;\n          height: auto;\n          -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                  box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n          border-radius: 2px;\n          margin: 15vh auto !important;\n          -webkit-transform: scale(0.5) !important;\n                  transform: scale(0.5) !important;\n          -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: transform 0.3s, opacity 0.3s;\n          transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n          opacity: 0; }\n          #time-picker-wrapper #time-picker.static {\n            margin: 0px !important;\n            -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                    box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12); }\n          #time-picker-wrapper #time-picker.active {\n            -webkit-transform: scale(1) !important;\n                    transform: scale(1) !important;\n            opacity: 1; }\n          #time-picker-wrapper #time-picker .time-picker-header {\n            text-align: center;\n            padding: 15px 0px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time {\n              font-size: 35px;\n              padding: 5px 0px; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div {\n                display: inline-block;\n                cursor: pointer; }\n                #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true] {\n                  cursor: default; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm {\n              font-size: 18px; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div {\n                display: inline-block;\n                padding: 0 5px;\n                cursor: pointer; }\n                #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true] {\n                  cursor: default; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock {\n            width: 200px;\n            height: 200px;\n            padding: 24px;\n            border-radius: 50%;\n            cursor: pointer;\n            margin: 25px auto;\n            position: relative;\n            user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            -webkit-user-select: none;\n            opacity: 1;\n            -webkit-transform: scale(1);\n                    transform: scale(1);\n            -webkit-transition: opacity 0.3s, transform 0.3s;\n            -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n            transition: opacity 0.3s, -webkit-transform 0.3s;\n            transition: opacity 0.3s, transform 0.3s;\n            transition: opacity 0.3s, transform 0.3s, -webkit-transform 0.3s; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button {\n              border: none;\n              position: absolute;\n              width: 35px;\n              height: 35px;\n              border-radius: 50%;\n              cursor: pointer;\n              font-size: 17px;\n              text-align: center;\n              padding: 0;\n              -webkit-transition: all .2s;\n              transition: all .2s;\n              z-index: 3; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin {\n              width: 6px;\n              height: 6px;\n              border-radius: 50%;\n              position: absolute;\n              left: 50%;\n              top: 50%;\n              margin-left: -3px;\n              margin-top: -3px; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow {\n              width: 2px;\n              height: 41%;\n              position: absolute;\n              left: 0;\n              top: 22px;\n              right: 0;\n              margin: auto;\n              -webkit-transform-origin: top left;\n              transform-origin: bottom; }\n              #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span {\n                width: 8px;\n                height: 8px;\n                border-radius: 50%;\n                position: absolute;\n                top: 0;\n                right: -3px; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .smallArrow {\n              height: 60px;\n              top: 64px; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock.hide-time-picker-clock {\n              opacity: 0;\n              -webkit-transform: scale(0.8);\n                      transform: scale(0.8); }\n          #time-picker-wrapper #time-picker .time-picker-footer {\n            padding: 15px;\n            text-align: right; }\n            #time-picker-wrapper #time-picker .time-picker-footer button {\n              border: transparent;\n              margin-left: 10px;\n              padding: 10px;\n              font-size: 14px;\n              border-radius: 2px;\n              cursor: pointer; }\n\n      * {\n        outline: none;\n        -webkit-box-sizing: content-box;\n                box-sizing: content-box; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AtpCoreService, },\n];\n}\n\nfunction TimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTimePickerComponent.ctorParameters;\n/** @type {?} */\nTimePickerComponent.prototype._ref;\n/** @type {?} */\nTimePickerComponent.prototype.subject;\n/** @type {?} */\nTimePickerComponent.prototype.activeModal;\n/** @type {?} */\nTimePickerComponent.prototype.timerElement;\n/** @type {?} */\nTimePickerComponent.prototype.clockObject;\n/** @type {?} */\nTimePickerComponent.prototype.isClicked;\n/** @type {?} */\nTimePickerComponent.prototype.clockType;\n/** @type {?} */\nTimePickerComponent.prototype.time;\n/** @type {?} */\nTimePickerComponent.prototype.nowTime;\n/** @type {?} */\nTimePickerComponent.prototype.degree;\n/** @type {?} */\nTimePickerComponent.prototype.config;\n/** @type {?} */\nTimePickerComponent.prototype.appRef;\n/** @type {?} */\nTimePickerComponent.prototype.isPopup;\n/** @type {?} */\nTimePickerComponent.prototype.allowed;\n/** @type {?} */\nTimePickerComponent.prototype.preference;\n/** @type {?} */\nTimePickerComponent.prototype.changeToMin;\n/** @type {?} */\nTimePickerComponent.prototype.smallArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rayon;\n/** @type {?} */\nTimePickerComponent.prototype.animationTime;\n/** @type {?} */\nTimePickerComponent.prototype.clockMaker;\n/** @type {?} */\nTimePickerComponent.prototype.setActiveTime;\n/** @type {?} */\nTimePickerComponent.prototype.setArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rotationClass;\n/** @type {?} */\nTimePickerComponent.prototype.getDegree;\n/** @type {?} */\nTimePickerComponent.prototype.core;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n  protected work: (this: this, state?: T) => void;\n\n  constructor(protected scheduler: AsyncScheduler,\n              work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n    this.work = work;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return JSON.parse((xhr as any).responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return  ('response' in xhr) ? xhr.response : (xhr as any).responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","import { Component, ViewChild, ViewContainerRef, Output, ComponentFactoryResolver, OnInit, ApplicationRef, EventEmitter\n} from '@angular/core';\nimport { TimePickerComponent } from '../time-picker/time-picker.component';\nimport { TimePickerConfig } from '../definitions';\n\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport { Subject } from 'rxjs';\nexport class AtpTimePickerComponent implements OnInit {\n   container: ViewContainerRef;\n   timeSelected: EventEmitter<string> = new EventEmitter<string>();\npublic config: TimePickerConfig = {};\n/**\n * @param {?} resolver\n * @param {?} appRef\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    let /** @type {?} */ config = this.config;\n    config = {\n      time: config.time || '00:00',\n      theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {}\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n      color: config.arrowStyle.color || '#fff'\n    };\n    const /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = this.container.createComponent(cfr);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    tsc.instance.activeModal = true;\n    tsc.instance.isPopup = false;\n    tsc.instance.ParseStringToTime(config.time);\n    tsc.instance.subject.asObservable().subscribe(time => {\n      this.timeSelected.emit(time);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'atp-time-picker',\n  template: `\n    <div #container></div>\n  `,\n  styles: [`\n    .atp-time-picker .icon-container {\n      display: inline-block;\n      margin-right: .2em; }\n      .atp-time-picker .icon-container svg {\n        cursor: pointer;\n        position: relative;\n        top: .5em; }\n      .atp-time-picker .icon-container /deep/ i {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef }, ] },],\n'timeSelected': [{ type: Output },],\n};\n}\n\nfunction AtpTimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpTimePickerComponent.ctorParameters;\n/** @type {?} */\nAtpTimePickerComponent.propDecorators;\n/** @type {?} */\nAtpTimePickerComponent.prototype.container;\n/** @type {?} */\nAtpTimePickerComponent.prototype.timeSelected;\n/** @type {?} */\nAtpTimePickerComponent.prototype.config;\n/** @type {?} */\nAtpTimePickerComponent.prototype.resolver;\n/** @type {?} */\nAtpTimePickerComponent.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {IDisplayPreference} from './definitions';\n\nconst /** @type {?} */ arabic = new Intl.NumberFormat('ar-AE');\nconst /** @type {?} */ persian = new Intl.NumberFormat('fa-IR');\n\nexport const /** @type {?} */ PersianPreference: IDisplayPreference = {\n    hour: (x) => persian.format(x),\n    minute: (x) => {\n        let /** @type {?} */ exp = persian.format(x);\n        if (exp.length === 1) {\n            exp = persian.format(0) + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: (x) => x === 'AM' ? 'صبح' : 'عصر',\n    clockHour: (x) => persian.format(x),\n    clockMinute: (x) => persian.format(x),\n    labels: {\n        ok: 'تایید',\n        cancel: 'لغو'\n    }\n};\n\nexport const /** @type {?} */ ArabicPreference: IDisplayPreference = {\n    hour: (x) => arabic.format(x),\n    minute: (x) => {\n        let /** @type {?} */ exp = arabic.format(x);\n        if (exp.length === 1) {\n            exp = arabic.format(0) + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: (x) => x === 'AM' ? 'صباحا' : 'مساء',\n    clockHour: (x) => arabic.format(x),\n    clockMinute: (x) => arabic.format(x),\n    labels: {\n        ok: 'حسنا',\n        cancel: 'إلغاء'\n    }\n};\n\nexport const /** @type {?} */ ChinesePreference: IDisplayPreference = {\n    hour: (x) => x,\n    minute: (x) => {\n        let /** @type {?} */ exp = x;\n        if (exp.length === 1) {\n            exp = '۰' + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: (x) => x === 'AM' ? '上午' : '下午',\n    clockHour: (x) => x,\n    clockMinute: (x) => x,\n    labels: {\n        ok: '确定',\n        cancel: '取消'\n    }\n};\n\nexport const /** @type {?} */ FrenchPreference: IDisplayPreference = {\n    hour: (x) => x,\n    minute: (x) => {\n        let /** @type {?} */ exp = x;\n        if (exp.length === 1) {\n            exp = '۰' + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: (x) => x === 'AM' ? 'Matin' : 'Après midi',\n    clockHour: (x) => x,\n    clockMinute: (x) => x,\n    labels: {\n        ok: 'Valider',\n        cancel: 'Annuler'\n    }\n};\n\nexport const /** @type {?} */ defaultPreference: IDisplayPreference = {\n    hour: (x) => x,\n    minute: (x) => {\n        let /** @type {?} */ exp = x;\n        if (exp.length === 1) {\n            exp = '۰' + exp;\n        }\n        return exp;\n    },\n    separator: ':',\n    period: (x) => x === 'AM' ? 'AM' : 'PM',\n    clockHour: (x) => x,\n    clockMinute: (x) => x,\n    labels: {\n        ok: 'ok',\n        cancel: 'cancel'\n    }\n};\n\nexport const /** @type {?} */ Preference = (locale: string): IDisplayPreference => {\n    switch (locale) {\n        case 'fa':\n            return PersianPreference;\n        case 'fr':\n            return FrenchPreference;\n        case 'ar':\n            return ArabicPreference;\n        case 'zh':\n            return ChinesePreference;\n        default:\n            return defaultPreference;\n    }\n};\n","import {ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef, Injectable, Injector} from '@angular/core';\nimport {TimePickerComponent} from './time-picker/time-picker.component';\nimport {IDialogResult, TimePickerConfig} from './definitions';\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport {Subject} from 'rxjs';\n/* tslint:enable */\n\nimport {Preference} from './preferences';\nexport class AmazingTimePickerService {\n/**\n * @param {?} resolver\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\nprivate injector: Injector\n    ) {\n    }\n/**\n * @param {?=} config\n * @return {?}\n */\nopen(config?: TimePickerConfig): IDialogResult {\n        const /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n        const /** @type {?} */ _self = this;\n        config = config || {};\n        config = /** @type {?} */(( {\n            time: config.time || '00:00',\n            theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n            rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n            system: config.system || 'SYSTEM12',\n            arrowStyle: config.arrowStyle || {},\n            locale: config.locale || 'en',\n            changeToMinutes: config.changeToMinutes,\n            animation: (config.animation == null || config.animation === 'fade') ? 'fade' : (config.animation === 'rotate') ? 'rotate' : false,\n            preference: config.preference || null,\n            onlyHour: config.onlyHour,\n            onlyMinute: config.onlyMinute,\n            onlyAM: config.onlyAM,\n            onlyPM: config.onlyPM,\n        } as TimePickerConfig));\n        config.rangeTime = {\n            start: config.rangeTime.start || '0:0',\n            end: config.rangeTime.end || '24:0',\n        };\n        config.arrowStyle = {\n            background: (config.arrowStyle.background) ?\n                config.arrowStyle.background : config.theme !== undefined ?\n                    config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n            color: config.arrowStyle.color || ''\n        };\n        const /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n        const /** @type {?} */ tsc = componentRef.create(this.injector);\n        this.appRef.attachView(tsc.hostView);\n        const /** @type {?} */ domElem = /** @type {?} */(( ( /** @type {?} */((tsc.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n        document.body.appendChild(domElem);\n        tsc.instance.subject = new Subject<any>();\n        tsc.instance._ref = tsc;\n        tsc.instance.appRef = this.appRef;\n        tsc.instance.timerElement = '';\n        tsc.instance.config = config;\n        if (config.preference) {\n            tsc.instance.preference = config.preference;\n        } else {\n            tsc.instance.preference = Preference(config.locale);\n        }\n        tsc.instance.ParseStringToTime(config.time);\n        return {\n            afterClose: function () {\n                return tsc.instance.subject.asObservable();\n            }\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction AmazingTimePickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerService.ctorParameters;\n/** @type {?} */\nAmazingTimePickerService.prototype.resolver;\n/** @type {?} */\nAmazingTimePickerService.prototype.appRef;\n/** @type {?} */\nAmazingTimePickerService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Input, Output, ViewContainerRef} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {AmazingTimePickerService} from './atp-time-picker.service';\nimport {System} from './definitions';\nexport class AtpDirective implements ControlValueAccessor {\n\n     myClick = new EventEmitter();\nprivate elementRef: ElementRef;\n/**\n * @param {?} viewContainerRef\n * @param {?} atp\n */\nconstructor(\npublic viewContainerRef: ViewContainerRef,\nprivate atp: AmazingTimePickerService) {\n        this.elementRef = this.viewContainerRef.element;\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n        const /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n        const /** @type {?} */ time = ele.value;\n        const /** @type {?} */ theme = ele.getAttribute('theme');\n        const /** @type {?} */ start = ele.getAttribute('start');\n        const /** @type {?} */ end = ele.getAttribute('end');\n        const /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n        const /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n        const /** @type {?} */ animation = ele.getAttribute('animation');\n        const /** @type {?} */ preference = ele.getAttribute('preference') || null;\n        const /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') === 'true';\n        const /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') === 'true';\n        const /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') === 'true';\n        const /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') === 'true';\n        const /** @type {?} */ system = ele.getAttribute('system') || 'SYSTEM12';\n        let /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n        arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n        const /** @type {?} */ timePickerFunction = this.atp.open({\n            time,\n            theme,\n            rangeTime: {start, end},\n            system,\n            'arrowStyle': arrowStyle,\n            locale,\n            changeToMinutes,\n            animation,\n            onlyHour,\n            onlyMinute,\n            onlyAM,\n            onlyPM,\n            preference\n        });\n\n        timePickerFunction.afterClose().subscribe(retTime => {\n            this.writeValue(retTime); // update the native element\n            this.onChange(retTime); // update the form value (if there's a form)\n        });\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nonInput(e: any) {\n        this.onChange(e.srcElement.value);\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n        if (this.elementRef) {\n            this.elementRef.nativeElement.value = value;\n        }\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\n        this.onChange = fn;\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn) {\n    }\nprivate onChange = (x: any): void => {\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'input[atp-time-picker]',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AtpDirective,\n        multi: true\n    }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: AmazingTimePickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'myClick': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n'onInput': [{ type: HostListener, args: ['input', ['$event'], ] },],\n};\n}\n\nfunction AtpDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpDirective.ctorParameters;\n/** @type {?} */\nAtpDirective.propDecorators;\n/** @type {?} */\nAtpDirective.prototype.myClick;\n/** @type {?} */\nAtpDirective.prototype.elementRef;\n/** @type {?} */\nAtpDirective.prototype.onChange;\n/** @type {?} */\nAtpDirective.prototype.viewContainerRef;\n/** @type {?} */\nAtpDirective.prototype.atp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { AtpTimePickerComponent } from './atp-time-picker/atp-time-picker.component';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nimport { AtpDirective } from './atp.directive';\nimport { AtpCoreService } from './atp-core.service';\nexport class AmazingTimePickerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ],\n  providers: [\n    AmazingTimePickerService,\n    AtpCoreService\n  ],\n  entryComponents: [TimePickerComponent],\n  exports: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AmazingTimePickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["AtpCoreService","prototype","allowedTimes","min","max","system","allTimes","nowMinHour","split","nowMaxHour","nowMinMin","nowMaxMin","console","log","i","j","jDest","hour","minute","ampm","push","ClockMaker","rayon","type","format","r","step","items","concat","this","drawCircle","start","length","str","String","x","Math","sin","PI","y","cos","time","left","top","TimeToString","hh","StringToTime","_d","h","m","CalcDegrees","ele","parrentPos","targetX","currentTarget","offsetWidth","targetY","offsetHeight","Vx","round","clientX","Vy","clientY","radians","atan2","degrees","hitDistance","sqrt","pow","degMod","decorators","Injectable","ctorParameters","TimePickerComponent","core","_this","subject","activeModal","clockType","nowTime","isPopup","smallArrow","animationTime","clockMaker","clockObject","config","setArrow","setActiveTime","obj","rotationClass","degree","getDegree","getBoundingClientRect","isClicked","target","nodeName","clickHit","rangeTime","end","GetNowTime","allowed","indexOf","ParseStringToTime","undefined","GetTime","next","setTime","changeToMinutes","onlyHour","ChangeAnimational","checkBet","checkDisabled","t","modalAnimation","setTimeout","ngOnInit","onlyMinute","onlyPM","onlyAM","MinuteClick","HourClick","animation","changeToMin","SetAM","SetPM","Close","e","appRef","detachView","_ref","hostView","destroy","getClockArrowStyle","transform","-webkit-transform","background","arrowStyle","-webkit-transition","getAnimationTime","transition","updateClockDown","event","GetSeparator","preference","separator","GetPeriod","period","GetMinute","toString","GetHour","GetClockTime","clock","clockHour","clockMinute","GetLabel","key","defaults","ok","cancel","labels","Component","args","selector","template","styles","__window","window","__self","self","WorkerGlobalScope","_root","global","root_1","Error","Array","isArray","tryCatchTarget","tryCatcher","apply","arguments","errorObject_1","errorObject","fn","_super","__extends","UnsubscriptionError","errors","call","err","map","join","name","stack","message","flattenUnsubscriptionErrors","reduce","errs","UnsubscriptionError_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","isFunction_1","isFunction","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","value","error","complete","Symbol","root","exports","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","rxSubscriber_1","trustedSubscriber","SafeSubscriber","create","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","Object","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","nextOrObserver","Subscriber_1","getSymbolObservable","$$observable","observable","pipeFromArray","fns","input","prev","noop_1","noop","_i","Observable","subscribe","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","ObjectUnsubscribedError","SubjectSubscription","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","hasError","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","slice","SubjectSubscription_1","asObservable","Observable_1","Subject_2","AsyncSubject","hasNext","hasCompleted","Subject_1","dispatchNext","arg","dispatchError","BoundCallbackObservable","callbackFunc","scheduler","func","schedule","dispatch","AsyncSubject_1","handler","handlerFn","innerArgs","result_1","state","result_2","bindCallback","bindCallback_1","_a","shift","dispatchNext$1","dispatchError$1","BoundNodeCallbackObservable","bindNodeCallback","bindNodeCallback_1","ScalarObservable","done","EmptyObservable","ArrayObservable","array","of","isScheduler_1","isScheduler","pop","ScalarObservable_1","EmptyObservable_1","count","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","then","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","iterator_1","item","obs","TypeError","msg","none","combineLatest_2$2","observables","project","ArrayObservable_1","CombineLatestOperator","CombineLatestSubscriber","CombineLatestOperator_1","active","values","toRespond","subscribeToResult_1","subscribeToResult","unused","oldVal","_tryProject","OuterSubscriber_1","combineLatest_1","combineLatest","dispatchNext$2","dispatchError$2","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","return","idx","charAt","arr","o","isNaN","isFinite","valueAsNumber","sign","floor","abs","maxSafeInteger","toLength","ArrayLikeObservable","arrayLike","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","delay","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","FromObservable_1","mergeMap_2","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","MergeMapSubscriber","MergeMapOperator_1","buffer","_tryNext","_innerSub","_notifyResultSelector","mergeMap_1","mergeMap","identity_1","identity","mergeAll_1","mergeAll","from_1","from","concatAll_1","concatAll","of_1","concat_1","DeferObservable_2","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","defer","defer_1","empty_1","ForkJoinObservable_2","ForkJoinObservable","sources","ForkJoinSubscriber","completed","haveValues","total","innerSubscription","_hasValue","forkJoin","forkJoin_1","FromEventObservable","sourceObj","eventName","options","setupSubscription","addEventListener","removeEventListener","source_1","on","off","source_2","addListener","removeListener","source_3","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","fromEventPattern","fromEventPattern_1","fromPromise","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","generate","generate_1","IfObservable_2","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","if","if_1","_if","val","parseFloat","Action","work","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","scheduled","action","Scheduler_1","AsyncScheduler_1","AsyncAction_1","IntervalObservable","async_1","async","isNumeric_1","isNumeric","interval","interval_1","last","merge","merge_1","race_2","RaceOperator","RaceSubscriber","RaceOperator_1","hasFirst","race","race_1","NeverObservable","never","never_1","onErrorResumeNext_2$1","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic_1","OnErrorResumeNextSubscriber","subscribeToNextSource","onErrorResumeNext_1","onErrorResumeNextStatic","onErrorResumeNext","dispatch$1","PairsObservable","pairs","pairs_1","RangeObservable","_count","range","range_1","UsingObservable_2","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","using","using_1","ErrorObservable","throw_1","_throw","TimerObservable","dueTime","isDate_1","isDate","initialDelay","timer","timer_1","zip_2$1","zipStatic","ZipOperator","zipStatic_1","ZipSubscriber","ZipOperator_1","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","ZipSubscriber_1","nextResult","isComplete","zip_1","zip","map_2","thisArg","MapOperator","MapSubscriber","MapOperator_1","ajaxGet","url","headers","AjaxObservable","method","ajaxGet_1","ajaxPost","body","ajaxPost_1","ajaxDelete","ajaxDelete_1","ajaxPut","ajaxPut_1","ajaxPatch","ajaxPatch_1","mapResponse","map_1","response","ajaxGetJSON","responseType","ajaxGetJSON_1","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","timeout","prop","hasOwnProperty","AjaxSubscriber","get","post","delete","put","patch","getJSON","AjaxObservable_2","FormData","serializeBody","send","xhr","AjaxResponse","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURIComponent","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","AjaxSubscriber_1","originalEvent","parseXhrResponse","AjaxResponse_1","AjaxError_1","parse","responseXML","ajax","ajax_1","QueueAction","QueueScheduler","QueueAction_1","ReplaySubject_2","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","assignImpl","k","getAssign","assign","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","assign_1","ReplaySubject_1","data","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","close","onopen","openObserver","queue","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","webSocket","webSocket_1","buffer_2$2","closingNotifier","BufferOperator","BufferSubscriber","buffer_1","bufferCount_2$2","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","bufferCount_1","bufferCount","bufferTime_2$2","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferTime_1","bufferTime","bufferToggle_2$2","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferToggle","bufferWhen_2$2","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","bufferWhen","catchError_2","CatchOperator","caught","CatchSubscriber","err2","catchError_1","catchError","catch","catch_1","_catch","combineAll_1","combineAll","concat_2","concatMap_1","concatMap","innerObservable","concatMapTo_1","concatMapTo","count_2$2","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize_2$2","DeMaterializeOperator","DeMaterializeSubscriber","dematerialize_1","dematerialize","debounce_2$2","durationSelector","DebounceOperator","DebounceSubscriber","durationSubscription","emitValue","duration","debounce_1","debounce","debounceTime_2$2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","dispatchNext$3","debounceTime_1","debounceTime","defaultIfEmpty_2$2","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","defaultIfEmpty","delay_2$2","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","delayWhen_2$2","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayWhen_1","delayWhen","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","distinct_2$2","keySelector","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinct","distinctUntilChanged_2$2","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","Boolean","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","tap_2","DoOperator","DoSubscriber","safeSubscriber","tap_1","tap","do_1","_do","exhaust_2$2","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","exhaust_1","exhaust","exhaustMap_2$2","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","exhaustMap","expand_2$2","ExpandOperator","ExpandSubscriber","ExpandOperator_1","subscribeToProjection","expand_1","expand","ArgumentOutOfRangeError","elementAt_2$2","ElementAtOperator","ArgumentOutOfRangeError_1","ElementAtSubscriber","elementAt_1","elementAt","filter_2$2","FilterOperator","FilterSubscriber","filter_1","filter","finalize_2","callback","FinallyOperator","FinallySubscriber","finalize_1","finalize","finally","finally_1","_finally","find_2$2","FindValueOperator","yieldIndex","FindValueSubscriber","FindValueOperator_1","find_1","find","findIndex_1","findIndex","EmptyError","first_2$2","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","first_1","first","MapPolyfill","size","_keys","set","cb","MapPolyfill_1","FastMap","groupBy_2$2","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","GroupedObservable_1","groupBy_1","groupBy","ignoreElements_2$2","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","ignoreElements","isEmpty_2$2","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit_2$2","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","audit","auditTime_1","auditTime","last_2$2","LastOperator","LastSubscriber","last_1","let","let_1","letProto","letBind","every_2$2","EveryOperator","EverySubscriber","everyValueMatch","every_1","every","mapTo_2$2","MapToOperator","MapToSubscriber","mapTo_1","mapTo","materialize_2$2","MaterializeOperator","MaterializeSubscriber","materialize_1","materialize","scan_2","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","takeLast_2","TakeLastOperator","TakeLastSubscriber","ring","scan_1","scan","takeLast_1","takeLast","acc","comparer","reduce_1","max_1","merge_2","flatMap","mergeMapTo_2$2","MergeMapToOperator","MergeMapToSubscriber","MergeMapToOperator_1","mergeMapTo_1","mergeMapTo","flatMapTo","mergeScan_2$2","MergeScanOperator","MergeScanSubscriber","MergeScanOperator_1","mergeScan_1","mergeScan","min_1","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","refCount_1","ConnectableObservable_2","connectableProto","connectableObservableDescriptor","writable","multicast_2$2","subjectOrSubjectFactory","MulticastOperator","ConnectableObservable_1","multicast_1","multicast","observeOn","pairwise_2$2","PairwiseOperator","PairwiseSubscriber","hasPrev","pairwise_1","pairwise","pred","notPred","not_1","not","partition_1","partition","properties","props","currentProp","p","pluck_1","pluck","publish_1","publish","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior_1","publishBehavior","selectorOrScheduler","publishReplay_1","publishReplay","publishLast_1","publishLast","repeat_2$2","RepeatOperator","RepeatSubscriber","repeat_1","repeat","repeatWhen_2$2","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","repeatWhen_1","repeatWhen","retry_2$2","RetryOperator","RetrySubscriber","retry_1","retry","retryWhen_2$2","RetryWhenOperator","RetryWhenSubscriber","retryWhen_1","retryWhen","sample_2$2","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sample","sampleTime_2$2","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","sampleTime_1","sampleTime","sequenceEqual_2$2","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","SequenceEqualOperator_1","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","a","b","areEqual","nextB","SequenceEqualSubscriber_1","sequenceEqual_1","sequenceEqual","shareSubjectFactory","share_1","share","shareReplayOperator","shareReplay_1","shareReplay","single_2$2","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","single","skip_2$2","SkipOperator","SkipSubscriber","skip_1","skip","skipLast_2$2","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","currentIndex","oldValue","skipLast_1","skipLast","skipUntil_2$2","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipUntil","skipWhile_2$2","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","skipWhile","startWith_1","startWith","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","AsapAction","Immediate_1","Immediate","AsapScheduler","AsapAction_1","SubscribeOnObservable","delayTime","asap_1","asap","subscribeOn_2$2","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","subscribeOn","switchMap_2","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMap","switchAll_1","switchAll","switch","switch_1","_switch","switchMapTo_2$2","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","switchMapTo","take_2$2","TakeOperator","TakeSubscriber","take_1","take","takeUntil_2$2","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeUntil","takeWhile_2$2","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","takeWhile","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","throttle_1","throttleTime_2$2","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext$4","throttleTime_1","throttleTime","timeInterval_2$2","TimeIntervalOperator","TimeInterval","TimeInterval_1","TimeIntervalSubscriber","lastTime","span","timeInterval_1","timeInterval","TimeoutError","timeout_2$2","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","timeoutWith_2$2","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timeoutWith","timestamp_2$2","Timestamp","timestamp","timestamp_1","toArrayReducer","toArray_1","toArray","window_2$2","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount_2$2","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowCount","windowTime_2$2","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","windowTime_1","windowToggle_2$2","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowToggle","windowWhen_2$2","unsubscribeClosingNotification","closingNotification","windowWhen_1","windowWhen","withLatestFrom_2$2","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","withLatestFrom","zipProto","zipAll_1","zipAll","subscribedFrame","unsubscribedFrame","SubscriptionLoggable","logSubscribedFrame","SubscriptionLog_1","SubscriptionLog","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","derivedCtor","baseCtors","baseCtor","propertyKeys","len2","name_1","ColdObservable","messages","scheduleMessages","messagesLength","frame","ColdObservable_2","applyMixins_1","applyMixins","SubscriptionLoggable_1","HotObservable","setup","HotObservable_2","VirtualTimeScheduler_2","VirtualTimeScheduler","maxFrames","VirtualAction","frameTimeFactor","sort","sortActions","defaultMaxFrame","RequestAnimationFrameDefinition","TestScheduler","assertDeepEqual","VirtualTimeScheduler_1","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","ColdObservable_1","createHotObservable","HotObservable_1","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrameAction","AnimationFrame_1","AnimationFrame","AnimationFrameScheduler","AnimationFrameAction_1","AtpTimePickerComponent","resolver","timeSelected","EventEmitter","theme","color","cfr","resolveComponentFactory","tsc","container","createComponent","timerElement","ComponentFactoryResolver","ApplicationRef","propDecorators","ViewChild","read","ViewContainerRef","Output","arabic","Intl","NumberFormat","persian","PersianPreference","exp","ArabicPreference","ChinesePreference","FrenchPreference","defaultPreference","AmazingTimePickerService","injector","locale","attachView","domElem","rootNodes","Preference","afterClose","Injector","AtpDirective","viewContainerRef","atp","myClick","onChange","elementRef","onClick","nativeElement","getAttribute","replace","RegExp","retTime","writeValue","onInput","srcElement","registerOnChange","registerOnTouched","Directive","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","HostListener","AmazingTimePickerModule","NgModule","imports","CommonModule","declarations","entryComponents"],"mappings":"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"}
